install.packages(c("mapproj", "rworldmap"))
install.packages(c("SnowballC", "stopwords", "tidytext", "wordcloud2"))
install.packages("DiagrammeR")
unlink('about_cache', recursive = TRUE)
rm(list = ls())
library(tidyverse)
data<- mtcars
#' For a first overview over our data, we can use the base functions
#' (e.g. those which are without any package installations part of R)
#' str(), head(), summary(), table(), quantile(), and View().
names(data)
#' For a first overview over our data, we can use the base functions
#' (e.g. those which are without any package installations part of R)
#' names() str(), head(), summary(), table(), quantile(), and View().
names(data)
str(data)
head(data)
summary(data)
table(data$tp72) # you could use any other variable here.
table(data$mpg) # you could use any other variable here.
quantile(data$mpg, na.rm = TRUE)
## Cylinder
table(data$cyl)
View(data)
ls("package:datasets")
data<- airmiles
data<- data(airmiles)
library(datasets)
install.packages("datasets")
install.packages("datasets")
library(datasets)
data<- data(airmiles)
data<- data(airmiles)
ls("package:datasets")
data<- data(aiquality)
data<- data(airquality)
force(airquality)
force(airmiles)
View(airquality)
data<- data(cars)
force(cars)
data<- data(Titanic)
force(Titanic)
df<-as.data.frame(data)
View(df)
ls("package:datasets")
data<- data(women)
data<- women
View(women)
data<- volcano
View(airquality)
## Cylinder and Gear
table(data$cyl,data$gear)
rm(list = ls())
library(tidyverse)
# Loading the car dataset ----
data<-mtcars
# Descriptive Analysis ----
## Explore the data structure ----
#' For a first overview over our data, we can use the base functions
#' (e.g. those which are without any package installations part of R)
#' names() str(), head(), summary(), table(), quantile(), and View().
names(data)
str(data)
head(data)
summary(data)
table(data$mpg) # you could use any other variable here.
quantile(data$mpg, na.rm = TRUE)
View(data)
## Cylinder
table(data$cyl)
## Cylinder and Gear
table(data$cyl,data$gear)
#Mean
mean(data$cyl, na.rm=T)
hist(data$cyl, main = paste("Cylinder Histogram"),xlab="Alter (in Monaten)", ylab="Häufigkeit")#Bessere Grafik
View(data)
hist(data$gear, main = paste("Cylinder Histogram"),xlab="Alter (in Monaten)", ylab="Häufigkeit")#Bessere Grafik
## Median
median(data$cyl, na.rm=T)
## Modus
mode(data$cyl, na.rm=T)
## Modus
mode(data$cyl)
## Modus
modus(data$cyl, na.rm=T)
## Modus
modal(data$cyl, na.rm=T)
range(data$cyl, na.rm=T)
boxplot(data$mpg, na.rm=T)
boxplot(data$mpg, na.rm=T,main=paste("Boxplot mpg"))
data<- data(mtcars)
view(mtcars)
# Conduct an independent sample t-test of the number of Cylinders and the Miles per Gallon (mpg)
t.test(data$mpg[data$cyl==4],
data$mpg[data$cyl==8])
data<- mtcars
# Conduct an independent sample t-test of the number of Cylinders and the Miles per Gallon (mpg)
t.test(data$mpg[data$cyl==4],
data$mpg[data$cyl==8])
# Run a dependent sample t-test on variables
t.test(data$mpg, data$cyl, paired=TRUE)
# Run a dependent sample t-test on variables
t.test(data$gear, data$carb, paired=TRUE)
# Run the one-way ANOVA model
aov(data$mpg ~ data$cyl, data=api)
# Run the one-way ANOVA model
aov(data$mpg ~ data$cyl, data=data)
# Display full ANOVA results
summary(aov(data$mpg ~ data$cyl, data=data))
# Chi-Squared Test
chisq.test(data$mpg, data$cyl, correct=FALSE)
# Chi-Squared Test
chisq.test(data$mpg[data$cyl==4], data$mpg[data$cyl==8], correct=FALSE)
cor(data$mpg, data$cyl, use="complete.obs")
cor(data$cyl,data$mpg, use="complete.obs")
## Get the correlation matrix
cor(data$cyl,data$mpg,data$hp, use="complete.obs")
View(mtcars)
# Get a subset of variables
correlationsubset <- data[c("mpg","cyl","hp")]
# Get the correlation matrix
cor(correlationsubset, use="complete.obs")
# Inject outliers into data.
cars1 <- cars[1:30, ]  # original data
cars_outliers <- data.frame(speed=c(19,19,20,20,20), dist=c(190, 186, 210, 220, 218))  # introduce outliers.
cars2 <- rbind(cars1, cars_outliers)  # data with outliers.
# Plot of data with outliers.
par(mfrow=c(1, 2))
plot(cars2$speed, cars2$dist, xlim=c(0, 28), ylim=c(0, 230), main="With Outliers", xlab="speed", ylab="dist", pch="*", col="red", cex=2)
abline(lm(dist ~ speed, data=cars2), col="blue", lwd=3, lty=2)
# Plot of original data without outliers. Note the change in slope (angle) of best fit line.
plot(cars1$speed, cars1$dist, xlim=c(0, 28), ylim=c(0, 230), main="Outliers removed \n A much better fit!", xlab="speed", ylab="dist", pch="*", col="red", cex=2)
abline(lm(dist ~ speed, data=cars1), col="blue", lwd=3, lty=2)
outlier_values <- boxplot.stats(inputData$pressure_height)$out  # outlier values.
#Univariate approach
inputData <- read.csv("http://rstatistics.net/wp-content/uploads/2015/09/ozone2.csv", stringsAsFactors=F)
outlier_values <- boxplot.stats(inputData$pressure_height)$out  # outlier values.
outlier_values <- boxplot.stats(inputData$pressure_height)  # outlier values.
#Univariate approach
inputData <- read.csv("http://rstatistics.net/wp-content/uploads/2015/09/ozone2.csv", stringsAsFactors=F)
response_df <- inputData['ozone_reading']  # Y variable
View(inputData)
#Univariate approach
inputData <- ozone2
#Univariate approach
inputData <- ozone
#Univariate approach
inputData <- Ozone
#Detect Outliers
data()
#Detect Outliers
url <- "http://rstatistics.net/wp-content/uploads/2015/09/ozone.csv"
inputData <- read.csv(url)
View(inputData)
rm(list=ls())
airquality<-airquality
# Inject outliers into data.
cars1 <- cars[1:30, ]  # original data
cars_outliers <- data.frame(speed=c(19,19,20,20,20), dist=c(190, 186, 210, 220, 218))  # introduce outliers.
cars2 <- rbind(cars1, cars_outliers)  # data with outliers.
# Plot of data with outliers.
par(mfrow=c(1, 2))
plot(cars2$speed, cars2$dist, xlim=c(0, 28), ylim=c(0, 230), main="With Outliers", xlab="speed", ylab="dist", pch="*", col="red", cex=2)
abline(lm(dist ~ speed, data=cars2), col="blue", lwd=3, lty=2)
# Plot of original data without outliers. Note the change in slope (angle) of best fit line.
plot(cars1$speed, cars1$dist, xlim=c(0, 28), ylim=c(0, 230), main="Outliers removed \n A much better fit!", xlab="speed", ylab="dist", pch="*", col="red", cex=2)
abline(lm(dist ~ speed, data=cars1), col="blue", lwd=3, lty=2)
outlier_values <- boxplot.stats(airquality$Ozone)  # outlier values.
boxplot(airquality$Ozone, main="Ozone", boxwex=0.1)
mtext(paste("Outliers: ", paste(outlier_values, collapse=", ")), cex=0.6)
# For categorical variable
boxplot(Ozone ~ Month, data=airquality, main="Ozone reading across months")  # clear pattern is noticeable.
boxplot(Ozone ~ Day, data=airquality, main="Ozone reading for days of week")  # this may not be significant, as day of week variable is a subset of the month var.
# For continuous variable (convert to categorical if needed.)
boxplot(Ozone ~ Solar.R, data=airquality, main="Boxplot for Solar (continous) vs Ozone")
boxplot(Ozone ~ cut(Solar.R, pretty(airquality$Solar.R)), data=airquality, main="Boxplot for Solar (categorial) vs Ozone", cex.axis=0.5)
##Cooks distance
mod <- lm(Ozone ~ ., data=airquality)
cooksd <- cooks.distance(mod)
plot(cooksd, pch="*", cex=2, main="Influential Obs by Cooks distance")  # plot cook's distance
rm(list=ls())
airquality<-airquality
# Inject outliers into data.
cars1 <- cars[1:30, ]  # original data
cars_outliers <- data.frame(speed=c(19,19,20,20,20), dist=c(190, 186, 210, 220, 218))  # introduce outliers.
cars2 <- rbind(cars1, cars_outliers)  # data with outliers.
# Plot of data with outliers.
par(mfrow=c(1, 2))
plot(cars2$speed, cars2$dist, xlim=c(0, 28), ylim=c(0, 230), main="With Outliers", xlab="speed", ylab="dist", pch="*", col="red", cex=2)
abline(lm(dist ~ speed, data=cars2), col="blue", lwd=3, lty=2)
# Plot of original data without outliers. Note the change in slope (angle) of best fit line.
plot(cars1$speed, cars1$dist, xlim=c(0, 28), ylim=c(0, 230), main="Outliers removed \n A much better fit!", xlab="speed", ylab="dist", pch="*", col="red", cex=2)
abline(lm(dist ~ speed, data=cars1), col="blue", lwd=3, lty=2)
#Detect Outliers
par(mfrow=c(1, 1))
par(mfrow=c(1, 1))
outlier_values <- boxplot.stats(airquality$Ozone)  # outlier values.
boxplot(airquality$Ozone, main="Ozone", boxwex=0.1)
mtext(paste("Outliers: ", paste(outlier_values, collapse=", ")), cex=0.6)
# For categorical variable
boxplot(Ozone ~ Month, data=airquality, main="Ozone reading across months")  # clear pattern is noticeable.
boxplot(Ozone ~ Day, data=airquality, main="Ozone reading for days of week")  # this may not be significant, as day of week variable is a subset of the month var.
# For continuous variable (convert to categorical if needed.)
boxplot(Ozone ~ Solar.R, data=airquality, main="Boxplot for Solar (continous) vs Ozone")
boxplot(Ozone ~ cut(Solar.R, pretty(airquality$Solar.R)), data=airquality, main="Boxplot for Solar (categorial) vs Ozone", cex.axis=0.5)
##Cooks distance
mod <- lm(Ozone ~ ., data=airquality)
cooksd <- cooks.distance(mod)
plot(cooksd, pch="*", cex=2, main="Influential Obs by Cooks distance")  # plot cook's distance
abline(h = 4*mean(cooksd, na.rm=T), col="red")  # add cutoff line
text(x=1:length(cooksd)+1, y=cooksd, labels=ifelse(cooksd>4*mean(cooksd, na.rm=T),names(cooksd),""), col="red")  # add labels
influential <- 4*mean(cooksd, na.rm=T)  # influential row numbers
head(ozone[influential, ])  # influential observations
head(airquality[influential, ])  # influential observations
View(airquality)
par(mfrow=c(1, 1))
outlier_values <- boxplot.stats(airquality$Ozone)  # outlier values.
boxplot(airquality$Ozone, main="Ozone", boxwex=0.1)
mtext(paste("Outliers: ", paste(outlier_values, collapse=", ")), cex=0.6)
# For categorical variable
boxplot(Ozone ~ Month, data=airquality, main="Ozone reading across months")  # clear pattern is noticeable.
boxplot(Ozone ~ Day, data=airquality, main="Ozone reading for days of week")  # this may not be significant, as day of week variable is a subset of the month var.
unlink('about_cache', recursive = TRUE)
